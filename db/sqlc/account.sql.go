// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: account.sql

package tutorial

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner,
  blance,
  currency
) VALUES (
  $1, $2, $3
)
RETURNING id, owner, blance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string `json:"owner"`
	Blance   int64  `json:"blance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Blance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Blance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteACCOUNT = `-- name: DeleteACCOUNT :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteACCOUNT(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteACCOUNT, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, blance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Blance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, owner, blance, currency, created_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccount(ctx context.Context, arg ListAccountParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Blance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET blance = $2
WHERE id = $1
RETURNING id, owner, blance, currency, created_at
`

type UpdateAccountParams struct {
	ID     int64 `json:"id"`
	Blance int64 `json:"blance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Blance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Blance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
